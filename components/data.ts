import { Chat } from "./ai/chat-pane";

export const chatDataStudyPlan: Chat[] = [
  {
    mode: "user",
    content: `如何学习C++`
  },
  {
    mode: "ai",
    content: `学习C++可以遵循以下步骤：  
      1. **基础语法**：了解C++的基本语法，如变量、数据类型、运算符、控制结构等。  
      2. **面向对象编程**：学习类和对象的概念，掌握封装、继承和多态。  
      3. **标准库**：熟悉C++标准库中的容器、算法和输入输出流。  
      4. **实践编程**：通过编写小程序来实践所学知识，逐步提高编程能力。  
      5. **阅读代码**：阅读他人的代码，理解其设计和实现。  
      6. **项目经验**：参与实际项目，应用C++解决实际问题。  
      7. **持续学习**：C++不断更新，要持续关注新特性和最佳实践。  
      记得多实践，多编写代码，这是提高编程技能的关键。`
  },
  {
    mode: "user",
    content: `我今天和明天应该完成的任务有哪些？`
  },
  {
    mode: "ai",
    content: `根据你的学习情况来看，你已经掌握了C++的基础语法，下面的学习任务可以包括以下几个方面：  
      **今天的任务：**  
      1. **复习基础语法**：巩固你已经学习的内容，确保你对变量声明、数据类型、控制结构等有清晰的理解。  
      2. **练习编写小程序**：尝试编写一些简单的程序，如计算器、简单的文本编辑器或小游戏，来实践你的基础语法知识。  
      3. **阅读C++标准库文档**：开始熟悉C++标准库中的一些常用功能，例如输入输出流、字符串操作等。  
      4. **学习调试技巧**：了解如何在C++中使用调试工具，学会如何阅读和理解编译错误和警告。  
      **明天的任务：**  
      1. **面向对象编程概念**：开始学习类和对象的基本概念，包括构造函数、析构函数、成员变量和成员函数。  
      2. **封装和数据隐藏**：理解如何使用访问修饰符（public, private, protected）来控制类成员的可见性。  
      3. **继承和多态**：学习如何使用继承来扩展类的功能，以及如何实现多态性。  
      4. **编写面向对象的程序**：尝试创建一些面向对象的程序，例如使用继承和多态来模拟现实世界的问题。  
      5. **参与在线社区**：加入C++相关的论坛或社区，阅读其他开发者的代码，参与讨论，提出问题。  
      6. **阅读和分析开源项目**：选择一些简单的开源C++项目，阅读源代码，理解其设计和实现。  
      记住，学习编程是一个逐步积累的过程，不要急于求成。每天都要保持编码和学习，逐步提高你的技能。`
  },
]

export const chatDataPsychologicalCounseling: Chat[] = [
  {
    mode: "user",
    content: `我今天有点焦虑`
  },
  {
    mode: "ai",
    content: `焦虑是一种常见的情绪体验，每个人都可能会在某些时候感到焦虑。这里有一些建议，或许可以帮助你缓解焦虑：   
      1. **深呼吸**：进行几次深呼吸，可以帮助你放松身体，减少紧张感。  
      2. **运动**：即使是简单的散步或做一些伸展运动，也有助于释放压力。  
      3. **分散注意力**：做一些你喜欢的活动，比如阅读、绘画或听音乐，可以暂时让你的注意力从焦虑源上转移开。  
      4. **写日记**：将你的忧虑和感受写下来，有助于你理清思路，也可能发现问题的解决方法。  
      5. **与他人交流**：和朋友或家人谈谈你的感受，有时候倾诉可以减轻焦虑。  
      6. **正面思考**：试着用积极的角度看待问题，避免过度消极的自我对话。  
      7. **专业帮助**：如果焦虑感持续存在并影响到你的日常生活，考虑寻求心理健康专业人士的帮助。    
      记住，感到焦虑是正常的，重要的是找到适合自己的应对策略。如果你需要更多帮助或想要谈谈你的感受，请随时告诉我。我在这里支持你。`
  },
]

export const chatDataCareerPlanning: Chat[] = [
  {
    mode: "user",
    content: `我以后想做软件开发工程师，我该怎么努力`
  },
  {
    mode: "ai",
    content: `成为一名软件开发工程师是一个充满挑战和机遇的职业道路。以下是一些步骤和建议，帮助你朝着这个目标努力：  
    1. **学习基础知识**：掌握计算机科学和编程的基础知识，如数据结构、算法、计算机网络和操作系统。  
    2. **选择编程语言**：选择一种或几种编程语言开始学习，如Python、Java、JavaScript或C++。根据你的兴趣和目标行业的需求来选择。  
    3. **实践编程**：编程是一项实践技能，通过编写代码和参与项目来提高你的技能。  
    4. **参与项目**：加入开源项目或自己创建项目，这可以帮助你获得实际的编程经验。  
    5. **构建作品集**：创建一个在线作品集，展示你的项目和代码，这对于找工作非常重要。  
    6. **学习软件工程原理**：了解软件开发的最佳实践，包括版本控制、测试、持续集成和敏捷开发。  
    7. **获取学位或证书**：考虑获得计算机科学或相关领域的学位，或参加在线课程和认证来提升你的技能。  
    8. **网络和社区参与**：加入技术社区，参加技术会议和研讨会，与其他开发者交流。  
    9. **持续学习**：技术不断进步，持续学习新技术和工具是必要的。  
    10. **实习和工作经验**：寻找实习机会，获得行业经验，这将有助于你了解软件开发的实际工作。  
    11. **准备面试**：研究常见的技术面试问题，练习算法题和编程题。  
    12. **保持好奇心和热情**：对新技术和解决问题保持好奇心，这将帮助你在软件开发领域保持动力和创新。  
    记住，成为一名软件开发工程师是一个持续的学习和成长过程。保持耐心，不断挑战自己，你将能够实现你的目标。加油！`
  },
]

export const userData = {
  uuid: "D8CDA01B-5C55-6CFD-BA63-E49F3426A56D",
  headUrl: "/personal-info-head.jpg",
  name: "K1ssInn",
  createTime: new Date(),
  learnedCourses: 3,
  publishedPosts: 14,
  learningCourses: [
    {
      title: "C++编程基础",
      learned: 3,
      total: 10
    },
    {
      title: "Python编程基础",
      learned: 5,
      total: 10
    },
    {
      title: "Java编程基础",
      learned: 1,
      total: 18
    },
    {
      title: "JavaScript编程基础",
      learned: 2,
      total: 6
    }
  ]
}